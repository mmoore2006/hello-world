//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.42
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace LineCount {
    using System;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [System.Xml.Serialization.XmlRootAttribute("ResultsDataSet")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class ResultsDataSet : System.Data.DataSet {
        
        private ResultsDataTable tableResults;
        
        private System.Data.SchemaSerializationMode _schemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public ResultsDataSet() {
            this.BeginInit();
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected ResultsDataSet(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == System.Data.SchemaSerializationMode.IncludeSchema)) {
                System.Data.DataSet ds = new System.Data.DataSet();
                ds.ReadXmlSchema(new System.Xml.XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["Results"] != null)) {
                    base.Tables.Add(new ResultsDataTable(ds.Tables["Results"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new System.Xml.XmlTextReader(new System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ResultsDataTable Results {
            get {
                return this.tableResults;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.BrowsableAttribute(true)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override System.Data.DataSet Clone() {
            ResultsDataSet cln = ((ResultsDataSet)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                System.Data.DataSet ds = new System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["Results"] != null)) {
                    base.Tables.Add(new ResultsDataTable(ds.Tables["Results"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new System.Xml.XmlTextReader(stream), null);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableResults = ((ResultsDataTable)(base.Tables["Results"]));
            if ((initTable == true)) {
                if ((this.tableResults != null)) {
                    this.tableResults.InitVars();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "ResultsDataSet";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/ResultsDataSet.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableResults = new ResultsDataTable();
            base.Tables.Add(this.tableResults);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeResults() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(System.Xml.Schema.XmlSchemaSet xs) {
            ResultsDataSet ds = new ResultsDataSet();
            System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
            System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
            xs.Add(ds.GetSchemaSerializable());
            System.Xml.Schema.XmlSchemaAny any = new System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            return type;
        }
        
        public delegate void ResultsRowChangeEventHandler(object sender, ResultsRowChangeEvent e);
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ResultsDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnShortName;
            
            private System.Data.DataColumn columnRelativeName;
            
            private System.Data.DataColumn columnLines;
            
            private System.Data.DataColumn columnBlankLines;
            
            private System.Data.DataColumn columnDesignerLines;
            
            private System.Data.DataColumn columnCommentsLines;
            
            private System.Data.DataColumn columnProjectShortName;
            
            private System.Data.DataColumn columnProjectRelativeName;
            
            private System.Data.DataColumn columnProjectLines;
            
            private System.Data.DataColumn columnProjectBlankLines;
            
            private System.Data.DataColumn columnProjectDesignerLines;
            
            private System.Data.DataColumn columnProjectCommentsLines;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ResultsDataTable() {
                this.TableName = "Results";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ResultsDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ResultsDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ShortNameColumn {
                get {
                    return this.columnShortName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn RelativeNameColumn {
                get {
                    return this.columnRelativeName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn LinesColumn {
                get {
                    return this.columnLines;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn BlankLinesColumn {
                get {
                    return this.columnBlankLines;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DesignerLinesColumn {
                get {
                    return this.columnDesignerLines;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn CommentsLinesColumn {
                get {
                    return this.columnCommentsLines;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ProjectShortNameColumn {
                get {
                    return this.columnProjectShortName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ProjectRelativeNameColumn {
                get {
                    return this.columnProjectRelativeName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ProjectLinesColumn {
                get {
                    return this.columnProjectLines;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ProjectBlankLinesColumn {
                get {
                    return this.columnProjectBlankLines;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ProjectDesignerLinesColumn {
                get {
                    return this.columnProjectDesignerLines;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ProjectCommentsLinesColumn {
                get {
                    return this.columnProjectCommentsLines;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ResultsRow this[int index] {
                get {
                    return ((ResultsRow)(this.Rows[index]));
                }
            }
            
            public event ResultsRowChangeEventHandler ResultsRowChanging;
            
            public event ResultsRowChangeEventHandler ResultsRowChanged;
            
            public event ResultsRowChangeEventHandler ResultsRowDeleting;
            
            public event ResultsRowChangeEventHandler ResultsRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddResultsRow(ResultsRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ResultsRow AddResultsRow(string ShortName, string RelativeName, int Lines, int BlankLines, int DesignerLines, int CommentsLines, string ProjectShortName, string ProjectRelativeName, int ProjectLines, int ProjectBlankLines, int ProjectDesignerLines, int ProjectCommentsLines) {
                ResultsRow rowResultsRow = ((ResultsRow)(this.NewRow()));
                rowResultsRow.ItemArray = new object[] {
                        ShortName,
                        RelativeName,
                        Lines,
                        BlankLines,
                        DesignerLines,
                        CommentsLines,
                        ProjectShortName,
                        ProjectRelativeName,
                        ProjectLines,
                        ProjectBlankLines,
                        ProjectDesignerLines,
                        ProjectCommentsLines};
                this.Rows.Add(rowResultsRow);
                return rowResultsRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                ResultsDataTable cln = ((ResultsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new ResultsDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnShortName = base.Columns["ShortName"];
                this.columnRelativeName = base.Columns["RelativeName"];
                this.columnLines = base.Columns["Lines"];
                this.columnBlankLines = base.Columns["BlankLines"];
                this.columnDesignerLines = base.Columns["DesignerLines"];
                this.columnCommentsLines = base.Columns["CommentsLines"];
                this.columnProjectShortName = base.Columns["ProjectShortName"];
                this.columnProjectRelativeName = base.Columns["ProjectRelativeName"];
                this.columnProjectLines = base.Columns["ProjectLines"];
                this.columnProjectBlankLines = base.Columns["ProjectBlankLines"];
                this.columnProjectDesignerLines = base.Columns["ProjectDesignerLines"];
                this.columnProjectCommentsLines = base.Columns["ProjectCommentsLines"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnShortName = new System.Data.DataColumn("ShortName", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnShortName);
                this.columnRelativeName = new System.Data.DataColumn("RelativeName", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnRelativeName);
                this.columnLines = new System.Data.DataColumn("Lines", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnLines);
                this.columnBlankLines = new System.Data.DataColumn("BlankLines", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnBlankLines);
                this.columnDesignerLines = new System.Data.DataColumn("DesignerLines", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDesignerLines);
                this.columnCommentsLines = new System.Data.DataColumn("CommentsLines", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnCommentsLines);
                this.columnProjectShortName = new System.Data.DataColumn("ProjectShortName", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnProjectShortName);
                this.columnProjectRelativeName = new System.Data.DataColumn("ProjectRelativeName", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnProjectRelativeName);
                this.columnProjectLines = new System.Data.DataColumn("ProjectLines", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnProjectLines);
                this.columnProjectBlankLines = new System.Data.DataColumn("ProjectBlankLines", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnProjectBlankLines);
                this.columnProjectDesignerLines = new System.Data.DataColumn("ProjectDesignerLines", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnProjectDesignerLines);
                this.columnProjectCommentsLines = new System.Data.DataColumn("ProjectCommentsLines", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnProjectCommentsLines);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ResultsRow NewResultsRow() {
                return ((ResultsRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new ResultsRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(ResultsRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ResultsRowChanged != null)) {
                    this.ResultsRowChanged(this, new ResultsRowChangeEvent(((ResultsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ResultsRowChanging != null)) {
                    this.ResultsRowChanging(this, new ResultsRowChangeEvent(((ResultsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ResultsRowDeleted != null)) {
                    this.ResultsRowDeleted(this, new ResultsRowChangeEvent(((ResultsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ResultsRowDeleting != null)) {
                    this.ResultsRowDeleting(this, new ResultsRowChangeEvent(((ResultsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveResultsRow(ResultsRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                ResultsDataSet ds = new ResultsDataSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ResultsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ResultsRow : System.Data.DataRow {
            
            private ResultsDataTable tableResults;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ResultsRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableResults = ((ResultsDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ShortName {
                get {
                    try {
                        return ((string)(this[this.tableResults.ShortNameColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'ShortName\' in table \'Results\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableResults.ShortNameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string RelativeName {
                get {
                    try {
                        return ((string)(this[this.tableResults.RelativeNameColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'RelativeName\' in table \'Results\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableResults.RelativeNameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Lines {
                get {
                    try {
                        return ((int)(this[this.tableResults.LinesColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Lines\' in table \'Results\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableResults.LinesColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int BlankLines {
                get {
                    try {
                        return ((int)(this[this.tableResults.BlankLinesColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'BlankLines\' in table \'Results\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableResults.BlankLinesColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int DesignerLines {
                get {
                    try {
                        return ((int)(this[this.tableResults.DesignerLinesColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'DesignerLines\' in table \'Results\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableResults.DesignerLinesColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int CommentsLines {
                get {
                    try {
                        return ((int)(this[this.tableResults.CommentsLinesColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'CommentsLines\' in table \'Results\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableResults.CommentsLinesColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ProjectShortName {
                get {
                    try {
                        return ((string)(this[this.tableResults.ProjectShortNameColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'ProjectShortName\' in table \'Results\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableResults.ProjectShortNameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ProjectRelativeName {
                get {
                    try {
                        return ((string)(this[this.tableResults.ProjectRelativeNameColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'ProjectRelativeName\' in table \'Results\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableResults.ProjectRelativeNameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ProjectLines {
                get {
                    try {
                        return ((int)(this[this.tableResults.ProjectLinesColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'ProjectLines\' in table \'Results\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableResults.ProjectLinesColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ProjectBlankLines {
                get {
                    try {
                        return ((int)(this[this.tableResults.ProjectBlankLinesColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'ProjectBlankLines\' in table \'Results\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableResults.ProjectBlankLinesColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ProjectDesignerLines {
                get {
                    try {
                        return ((int)(this[this.tableResults.ProjectDesignerLinesColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'ProjectDesignerLines\' in table \'Results\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableResults.ProjectDesignerLinesColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ProjectCommentsLines {
                get {
                    try {
                        return ((int)(this[this.tableResults.ProjectCommentsLinesColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'ProjectCommentsLines\' in table \'Results\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableResults.ProjectCommentsLinesColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsShortNameNull() {
                return this.IsNull(this.tableResults.ShortNameColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetShortNameNull() {
                this[this.tableResults.ShortNameColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRelativeNameNull() {
                return this.IsNull(this.tableResults.RelativeNameColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRelativeNameNull() {
                this[this.tableResults.RelativeNameColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLinesNull() {
                return this.IsNull(this.tableResults.LinesColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLinesNull() {
                this[this.tableResults.LinesColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBlankLinesNull() {
                return this.IsNull(this.tableResults.BlankLinesColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBlankLinesNull() {
                this[this.tableResults.BlankLinesColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDesignerLinesNull() {
                return this.IsNull(this.tableResults.DesignerLinesColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDesignerLinesNull() {
                this[this.tableResults.DesignerLinesColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCommentsLinesNull() {
                return this.IsNull(this.tableResults.CommentsLinesColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCommentsLinesNull() {
                this[this.tableResults.CommentsLinesColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsProjectShortNameNull() {
                return this.IsNull(this.tableResults.ProjectShortNameColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetProjectShortNameNull() {
                this[this.tableResults.ProjectShortNameColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsProjectRelativeNameNull() {
                return this.IsNull(this.tableResults.ProjectRelativeNameColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetProjectRelativeNameNull() {
                this[this.tableResults.ProjectRelativeNameColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsProjectLinesNull() {
                return this.IsNull(this.tableResults.ProjectLinesColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetProjectLinesNull() {
                this[this.tableResults.ProjectLinesColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsProjectBlankLinesNull() {
                return this.IsNull(this.tableResults.ProjectBlankLinesColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetProjectBlankLinesNull() {
                this[this.tableResults.ProjectBlankLinesColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsProjectDesignerLinesNull() {
                return this.IsNull(this.tableResults.ProjectDesignerLinesColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetProjectDesignerLinesNull() {
                this[this.tableResults.ProjectDesignerLinesColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsProjectCommentsLinesNull() {
                return this.IsNull(this.tableResults.ProjectCommentsLinesColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetProjectCommentsLinesNull() {
                this[this.tableResults.ProjectCommentsLinesColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ResultsRowChangeEvent : System.EventArgs {
            
            private ResultsRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ResultsRowChangeEvent(ResultsRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ResultsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591